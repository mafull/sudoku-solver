{"version":3,"sources":["Sudoku.ts","ui/Board.tsx","ui/App.tsx","reportWebVitals.ts","index.tsx"],"names":["solveViaBacktracking","EMPTY_GRID","Sudoku","grid","this","row","col","value","rowIdx","length","colIdx","setCell","setGrid","difficulty","clear","axios","get","data","squares","forEach","x","y","isUniqueSet","map","squareRowIdx","Math","floor","squareColIdx","square","flatMap","slice","isRowValid","isColValid","isSquareValid","str","rowAsStrs","cell","join","console","log","set","seen","Set","has","add","sudoku","cellsToSolve","push","currCellIdx","currCellValue","getCell","trial","isCellValid","alert","Board","currentCell","className","solvers","solverMap","Backtracking","App","useState","setGridRaw","useCallback","isSolving","setIsSolving","selectedSolverName","setSelectedSolverName","solver","setSolver","intervalHandle","setIntervalHandle","setDifficulty","intervalMs","setIntervalMs","setCurrentCell","useEffect","clearInterval","setInterval","next","done","newCurrentCell","onClick","generate","then","disabled","onChange","e","target","solverName","max","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mQA0JiBA,GA9HXC,EAAmB,CACrB,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACjD,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACjD,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACjD,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACjD,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACjD,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACjD,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACjD,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACjD,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,OAMxCC,EAAb,WAGI,aAAsC,IAA1BC,EAAyB,uDAAZF,EAAY,yBAFrCE,UAEqC,EACjCC,KAAKD,KAAOA,EAJpB,oDAOYE,EAAoBC,GACxB,OAAOF,KAAKD,KAAKE,GAAKC,KAR9B,8BAYQD,EACAC,EACAC,GAEAH,KAAKD,KAAKE,GAAKC,GAAOC,IAhB9B,8BAmBYJ,GACJC,KAAKD,KAAOA,IApBpB,8BAwBQ,IAAK,IAAIK,EAAS,EAAGA,EAASJ,KAAKD,KAAKM,OAAQD,IAC5C,IAAK,IAAIE,EAAS,EAAGA,EAASN,KAAKD,KAAK,GAAGM,OAAQC,IAC/CN,KAAKO,QACDH,EACAE,EACA,MAIZN,KAAKQ,QAAQX,KAjCrB,6KAuCmBY,EAvCnB,+BAuC2C,EACnCT,KAAKU,QAxCb,SA2CkBC,IAAMC,IAAN,mEACsDH,IA5CxE,kBA0CYI,KAAQC,QAIJC,SAAQ,gBAAGC,EAAH,EAAGA,EAAGC,EAAN,EAAMA,EAAGd,EAAT,EAASA,MAAT,OAA0B,EAAKI,QAAQU,EAAGD,EAAGb,MA9CrE,uIA4DeC,GACP,IAAMH,EAAMD,KAAKD,KAAKK,GACtB,OAAON,EAAOoB,YAAYjB,KA9DlC,iCAiEeK,GACP,IAAMJ,EAAMF,KAAKD,KAAKoB,KAAI,SAAClB,GAAD,OAASA,EAAIK,MACvC,OAAOR,EAAOoB,YAAYhB,KAnElC,oCAsEkBE,EAAuBE,GAAiC,IAAD,OAC3Dc,EAAwC,EAAzBC,KAAKC,MAAMlB,EAAS,GACnCmB,EAAwC,EAAzBF,KAAKC,MAAMhB,EAAS,GACnCkB,EAAS,CACXJ,EACAA,EAAe,EACfA,EAAe,GACjBK,SAAQ,SAACrB,GAEP,OADY,EAAKL,KAAKK,GACXsB,MAAMH,EAAcA,EAAe,MAElD,OAAOzB,EAAOoB,YAAYM,KAjFlC,kCAoFgBpB,EAAuBE,GAC/B,OACIN,KAAK2B,WAAWvB,IAChBJ,KAAK4B,WAAWtB,IAChBN,KAAK6B,cAAczB,EAAQE,KAxFvC,kCA8FQ,IADA,IAAIwB,EAAM,GACD1B,EAAS,EAAGA,EAASJ,KAAKD,KAAKM,OAAQD,IAAU,CACtD,IAAM2B,EAAS,sBACR/B,KAAKD,KAAKK,GAAQsB,MAAM,EAAG,GAAGP,KAAI,SAACa,GAAD,OAAUA,GAAQ,QAD5C,CAEX,KAFW,YAGRhC,KAAKD,KAAKK,GAAQsB,MAAM,EAAG,GAAGP,KAAI,SAACa,GAAD,OAAUA,GAAQ,QAH5C,CAIX,KAJW,YAKRhC,KAAKD,KAAKK,GAAQsB,MAAM,GAAGP,KAAI,SAACa,GAAD,OAAUA,GAAQ,SAExDF,GAAG,aAAUC,EAAUE,KAAK,MACb,IAAX7B,GAA2B,IAAXA,IAAc0B,GAAO,4BAE7CI,QAAQC,IAAIL,MAzGpB,mCAkD+BM,GACvB,IADkD,EAC5CC,EAAO,IAAIC,IADiC,cAE/BF,GAF+B,IAElD,2BAAwB,CAAC,IAAdJ,EAAa,QACpB,GAAa,OAATA,EAAJ,CACA,GAAIK,EAAKE,IAAIP,GAAO,OAAO,EAC3BK,EAAKG,IAAIR,KALqC,8BAOlD,OAAO,MAzDf,KA+GO,SAAUpC,EACb6C,GADG,uFAKH,IAFMC,EAAmC,GAEhCtC,EAAS,EAAGA,EAASqC,EAAO1C,KAAKM,OAAQD,IAC9C,IAASE,EAAS,EAAGA,EAASmC,EAAO1C,KAAK,GAAGM,OAAQC,IACb,OAAhCmC,EAAO1C,KAAKK,GAAQE,IACpBoC,EAAaC,KAAK,CAACvC,EAAeE,IAI1CsC,EAAc,EAZf,YAaIA,EAAcF,EAAarC,QAb/B,kCAc0BqC,EAAaE,GAdvC,GAcQxC,EAdR,KAcgBE,EAdhB,KAgBuB,KADhBuC,EAAgBJ,EAAOK,QAAQ1C,EAAQE,IAf9C,iBAgB0BmC,EAAOlC,QAAQH,EAAQE,EAAQ,MAhBzD,wBAmBayC,EAAQF,EAAgBA,EAAgB,EAAI,EAnBzD,aAoBSE,GAAS,GApBlB,oBAuBSN,EAAOlC,QAAQH,EAAQE,EAAQyC,IAC3BN,EAAOO,YAAY5C,EAAQE,GAxBxC,qDA0BSmC,EAAOlC,QAAQH,EAAQE,EAAQ,MA1BxC,QAqBSyC,IArBT,wBAgCC,OAHuC,OAAnCN,EAAOK,QAAQ1C,EAAQE,GACvBsC,IACGA,IA/BR,UAgCO,CAACxC,EAAQE,GAhChB,+BAmCH2C,MAAM,WAnCH,wCCrJP,IAwBeC,EAxB0D,SAAC,GAAD,IACrEnD,EADqE,EACrEA,KACAoD,EAFqE,EAErEA,YAFqE,OAIrE,qBAAKC,UAAU,QAAf,SACKrD,EAAKoB,KAAI,SAAClB,EAAKG,GAAN,OACNH,EAAIkB,KAAI,SAACa,EAAM1B,GAAP,OACJ,qBAEI8C,UAAS,cACLD,GACA/C,IAAW+C,EAAY,IACvB7C,IAAW6C,EAAY,GACjB,WACA,IAPd,SAUKnB,GATI5B,EAASE,YCN5BmC,G,MAAS,IAAI3C,GAEbuD,EAAU,CAAC,gBAEXC,EAGF,CACAC,aAAc3D,GAqJH4D,EAlJO,WAAO,IAAD,EACGC,mBAAehB,EAAO1C,MADzB,mBACjBA,EADiB,KACX2D,EADW,KAElBlD,EAAUmD,uBACZ,SAAC5D,GAAD,OACI2D,EAAW3D,EAAKoB,KAAI,SAAClB,GAAD,OAASA,EAAIkB,KAAI,SAACa,GAAD,OAAUA,WACnD,CAAC0B,IALmB,EAQUD,oBAAkB,GAR5B,mBAQjBG,EARiB,KAQNC,EARM,OAS4BJ,mBAChDJ,EAAQ,IAVY,mBASjBS,EATiB,KASGC,EATH,OAYIN,mBAElB,MAdc,mBAYjBO,EAZiB,KAYTC,EAZS,OAeoBR,mBACxC,MAhBoB,mBAejBS,EAfiB,KAeDC,EAfC,OAkBYV,mBAAoB,GAlBhC,mBAkBjBhD,EAlBiB,KAkBL2D,EAlBK,OAmBYX,mBAAiB,KAnB7B,mBAmBjBY,EAnBiB,KAmBLC,EAnBK,OAoBcb,mBAA6B,MApB3C,mBAoBjBN,EApBiB,KAoBJoB,EApBI,KAuCxB,OAjBAC,qBAAU,WACFN,GAAgBO,cAAcP,GAC9BN,GACAO,EACIO,aAAY,WAAO,IAAD,EAC0BV,EAAQW,OAAxCC,EADM,EACNA,KAAaC,EADP,EACA1E,MACdoE,EAAeM,GACfrE,EAAQiC,EAAO1C,MACX6E,IACAX,EAAU,MACVJ,GAAa,MAElBQ,MAGZ,CAACT,EAAWS,IAGX,sBAAKjB,UAAU,YAAf,UACI,qBAAKA,UAAU,QAAf,sGAIA,cAAC,EAAD,CAAOrD,KAAMA,EAAMoD,YAAaA,IAChC,sBAAKC,UAAU,eAAf,UACI,gCACI,wBACI0B,QAAS,WACLrC,EAAOsC,SAAStE,GAAYuE,MAAK,WAC7BxE,EAAQiC,EAAO1C,MACfkE,EACIX,EAAUQ,GAAoBrB,QAI1CwC,SAAUrB,EATd,wBAaA,wBACIkB,QAAS,WACLjB,GAAcD,IAElBqB,UAAWjB,EAJf,SAMKJ,EAAY,QAAU,WAE3B,wBACIkB,QAAS,WACLrC,EAAO/B,QACPuD,EAAU,MACVzD,EAAQiC,EAAO1C,OAEnBkF,SAAUrB,IAAcI,EAN5B,sBAWJ,sBAAKZ,UAAU,mBAAf,UACI,sBAAMA,UAAU,yBAAhB,wBACA,qBAAKA,UAAU,4BAAf,SACI,wBACIjD,MAAO2D,EACPoB,SAAU,SAACC,GAAD,OACNpB,EACIoB,EAAEC,OAAOjF,QAGjB8E,SAAUrB,EAPd,SASKP,EAAQlC,KAAI,SAACkE,GAAD,OACT,wBAAyBlF,MAAOkF,EAAhC,SACKA,GADQA,aAO7B,sBAAKjC,UAAU,mBAAf,UACI,sBAAMA,UAAU,yBAAhB,uBACA,sBAAKA,UAAU,4BAAf,UACI,wBACI0B,QAAS,kBACLR,EAAcjD,KAAKiE,IAAIjB,EAAa,GAAI,KAE5CY,SAAyB,IAAfZ,EAJd,eAQA,iCAAOA,EAAP,SACA,wBAAQS,QAAS,kBAAMR,EAAcD,EAAa,KAAlD,qBAKR,sBAAKjB,UAAU,mBAAf,UACI,sBAAMA,UAAU,yBAAhB,yBACA,sBAAKA,UAAU,4BAAf,UACI,wBACI0B,QAAS,kBACLV,EAAe3D,EAAa,IAEhCwE,SAAyB,IAAfxE,EAJd,eAQA,yCAAUA,EAAV,aACI,CAAC,OAAQ,OAAQ,QAAQA,EAAa,GAD1C,OAGA,wBACIqE,QAAS,kBACLV,EAAe3D,EAAa,IAEhCwE,SAAyB,IAAfxE,EAJd,4BCrIT8E,EAdS,SAACC,GACjBA,GAAeA,aAAuBC,UACtC,6BAAqBT,MACjB,YAAkD,IAA/CU,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC/BJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCLxBO,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SAM5BZ,M","file":"static/js/main.be03b8bf.chunk.js","sourcesContent":["import axios from \"axios\";\n\nimport { Array9, Cell, Grid } from \"./types\";\n\nconst DUMMY_GRID: Grid = [\n    [null, 7, 9, 5, null, 8, null, null, 4],\n    [2, 3, null, 1, 4, null, null, null, 6],\n    [5, 6, null, null, null, null, 7, null, 8],\n    [null, 1, 7, null, null, 2, 4, 8, 5],\n    [null, null, 6, null, 5, null, null, null, 7],\n    [4, null, null, 7, null, null, 9, 6, null],\n    [7, null, null, null, null, null, null, null, null],\n    [null, 5, null, null, null, 4, 8, 7, null],\n    [null, null, null, null, null, null, null, 5, null],\n];\n\nconst DUMMY_GRID_SOLVED: Grid = [\n    [1, 7, 9, 5, 6, 8, 2, 3, 4],\n    [2, 3, 8, 1, 4, 7, 5, 9, 6],\n    [5, 6, 4, 2, 3, 9, 7, 1, 8],\n    [3, 1, 7, 6, 9, 2, 4, 8, 5],\n    [8, 9, 6, 4, 5, 1, 3, 2, 7],\n    [4, 2, 5, 7, 8, 3, 9, 6, 1],\n    [7, 8, 1, 3, 2, 5, 6, 4, 9],\n    [6, 5, 2, 9, 1, 4, 8, 7, 3],\n    [9, 4, 3, 8, 7, 6, 1, 5, 2],\n];\n\nconst EMPTY_GRID: Grid = [\n    [null, null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null, null],\n];\n\nconst VALID_INDICES = [0, 1, 2, 3, 4, 5, 6, 7, 8] as const;\ntype RowOrColIndex = typeof VALID_INDICES[number];\n\nexport class Sudoku {\n    grid: Grid;\n\n    constructor(grid: Grid = EMPTY_GRID) {\n        this.grid = grid;\n    }\n\n    getCell(row: RowOrColIndex, col: RowOrColIndex): Cell {\n        return this.grid[row][col];\n    }\n\n    setCell(\n        row: RowOrColIndex,\n        col: RowOrColIndex,\n        value: number | null\n    ): void {\n        this.grid[row][col] = value;\n    }\n\n    setGrid(grid: Grid): void {\n        this.grid = grid;\n    }\n\n    clear(): void {\n        for (let rowIdx = 0; rowIdx < this.grid.length; rowIdx++) {\n            for (let colIdx = 0; colIdx < this.grid[0].length; colIdx++) {\n                this.setCell(\n                    rowIdx as RowOrColIndex,\n                    colIdx as RowOrColIndex,\n                    null\n                );\n            }\n        }\n        this.setGrid(EMPTY_GRID);\n    }\n\n    /**\n     * @TODO actually generate\n     */\n    async generate(difficulty: 1 | 2 | 3 = 2): Promise<void> {\n        this.clear();\n        const {\n            data: { squares },\n        } = await axios.get(\n            `http://www.cs.utep.edu/cheon/ws/sudoku/new/?size=9&level=${difficulty}`\n        );\n        squares.forEach(({ x, y, value }: any) => this.setCell(y, x, value));\n        // this.setGrid(DUMMY_GRID);\n    }\n\n    private static isUniqueSet(set: Array<Cell>): boolean {\n        const seen = new Set<number>();\n        for (const cell of set) {\n            if (cell === null) continue;\n            if (seen.has(cell)) return false;\n            seen.add(cell);\n        }\n        return true;\n    }\n\n    isRowValid(rowIdx: RowOrColIndex): boolean {\n        const row = this.grid[rowIdx];\n        return Sudoku.isUniqueSet(row);\n    }\n\n    isColValid(colIdx: RowOrColIndex): boolean {\n        const col = this.grid.map((row) => row[colIdx]);\n        return Sudoku.isUniqueSet(col);\n    }\n\n    isSquareValid(rowIdx: RowOrColIndex, colIdx: RowOrColIndex): boolean {\n        const squareRowIdx = Math.floor(rowIdx / 3) * 3;\n        const squareColIdx = Math.floor(colIdx / 3) * 3;\n        const square = [\n            squareRowIdx,\n            squareRowIdx + 1,\n            squareRowIdx + 2,\n        ].flatMap((rowIdx) => {\n            const row = this.grid[rowIdx];\n            return row.slice(squareColIdx, squareColIdx + 3);\n        });\n        return Sudoku.isUniqueSet(square);\n    }\n\n    isCellValid(rowIdx: RowOrColIndex, colIdx: RowOrColIndex): boolean {\n        return (\n            this.isRowValid(rowIdx) &&\n            this.isColValid(colIdx) &&\n            this.isSquareValid(rowIdx, colIdx)\n        );\n    }\n\n    printGrid(): void {\n        let str = \"\";\n        for (let rowIdx = 0; rowIdx < this.grid.length; rowIdx++) {\n            const rowAsStrs = [\n                ...this.grid[rowIdx].slice(0, 3).map((cell) => cell || \" \"),\n                \"|\",\n                ...this.grid[rowIdx].slice(3, 6).map((cell) => cell || \" \"),\n                \"|\",\n                ...this.grid[rowIdx].slice(6).map((cell) => cell || \" \"),\n            ];\n            str += `\\n ${rowAsStrs.join(\" \")}`;\n            if (rowIdx === 2 || rowIdx === 5) str += \"\\n ---------------------\";\n        }\n        console.log(str);\n    }\n}\n\nexport type CellIndices = [row: RowOrColIndex, col: RowOrColIndex];\n\nexport function* solveViaBacktracking(\n    sudoku: Sudoku\n): IterableIterator<CellIndices> {\n    const cellsToSolve: Array<CellIndices> = [];\n\n    for (let rowIdx = 0; rowIdx < sudoku.grid.length; rowIdx++) {\n        for (let colIdx = 0; colIdx < sudoku.grid[0].length; colIdx++) {\n            if (sudoku.grid[rowIdx][colIdx] === null)\n                cellsToSolve.push([rowIdx as any, colIdx as any]);\n        }\n    }\n\n    let currCellIdx = 0;\n    while (currCellIdx < cellsToSolve.length) {\n        const [rowIdx, colIdx] = cellsToSolve[currCellIdx];\n        const currCellValue = sudoku.getCell(rowIdx, colIdx);\n        if (currCellValue === 9) sudoku.setCell(rowIdx, colIdx, null);\n        else {\n            for (\n                let trial = currCellValue ? currCellValue + 1 : 1;\n                trial <= 9;\n                trial++\n            ) {\n                sudoku.setCell(rowIdx, colIdx, trial);\n                if (sudoku.isCellValid(rowIdx, colIdx)) break;\n\n                sudoku.setCell(rowIdx, colIdx, null);\n            }\n        }\n        if (sudoku.getCell(rowIdx, colIdx) !== null) {\n            currCellIdx++;\n        } else currCellIdx--;\n        yield [rowIdx, colIdx];\n    }\n\n    alert(\"Solved!\");\n}\n","import React from \"react\";\nimport { CellIndices } from \"../Sudoku\";\n\nimport { Grid } from \"../types\";\n\nconst Board: React.FC<{ grid: Grid; currentCell: CellIndices | null }> = ({\n    grid,\n    currentCell,\n}) => (\n    <div className=\"board\">\n        {grid.map((row, rowIdx) =>\n            row.map((cell, colIdx) => (\n                <div\n                    key={rowIdx + colIdx}\n                    className={`cell${\n                        currentCell &&\n                        rowIdx === currentCell[0] &&\n                        colIdx === currentCell[1]\n                            ? \" current\"\n                            : \"\"\n                    }`}\n                >\n                    {cell}\n                </div>\n            ))\n        )}\n    </div>\n);\n\nexport default Board;\n","import React, { useCallback, useEffect, useState } from \"react\";\n\nimport { solveViaBacktracking, Sudoku, CellIndices } from \"../Sudoku\";\nimport { Grid } from \"../types\";\nimport Board from \"./Board\";\nimport \"./App.css\";\n\nconst sudoku = new Sudoku();\n\nconst solvers = [\"Backtracking\"] as const;\ntype SolverName = typeof solvers[number];\nconst solverMap: Record<\n    SolverName,\n    (sudoku: Sudoku) => IterableIterator<CellIndices>\n> = {\n    Backtracking: solveViaBacktracking,\n};\n\nconst App: React.FC = () => {\n    const [grid, setGridRaw] = useState<Grid>(sudoku.grid);\n    const setGrid = useCallback(\n        (grid: Grid) =>\n            setGridRaw(grid.map((row) => row.map((cell) => cell)) as any),\n        [setGridRaw]\n    );\n\n    const [isSolving, setIsSolving] = useState<boolean>(false);\n    const [selectedSolverName, setSelectedSolverName] = useState<SolverName>(\n        solvers[0]\n    );\n    const [solver, setSolver] = useState<ReturnType<\n        typeof solveViaBacktracking\n    > | null>(null);\n    const [intervalHandle, setIntervalHandle] = useState<NodeJS.Timeout | null>(\n        null\n    );\n    const [difficulty, setDifficulty] = useState<1 | 2 | 3>(2);\n    const [intervalMs, setIntervalMs] = useState<number>(200);\n    const [currentCell, setCurrentCell] = useState<CellIndices | null>(null);\n\n    useEffect(() => {\n        if (intervalHandle) clearInterval(intervalHandle);\n        if (isSolving) {\n            setIntervalHandle(\n                setInterval(() => {\n                    const { done, value: newCurrentCell } = solver!.next();\n                    setCurrentCell(newCurrentCell);\n                    setGrid(sudoku.grid);\n                    if (done) {\n                        setSolver(null);\n                        setIsSolving(false);\n                    }\n                }, intervalMs)\n            );\n        }\n    }, [isSolving, intervalMs]);\n\n    return (\n        <div className=\"container\">\n            <div className=\"alert\">\n                You must turn off browser security in order to access the\n                external Sudoku generation API\n            </div>\n            <Board grid={grid} currentCell={currentCell} />\n            <div className=\"control-area\">\n                <div>\n                    <button\n                        onClick={() => {\n                            sudoku.generate(difficulty).then(() => {\n                                setGrid(sudoku.grid);\n                                setSolver(\n                                    solverMap[selectedSolverName](sudoku)\n                                );\n                            });\n                        }}\n                        disabled={isSolving}\n                    >\n                        Regenerate\n                    </button>\n                    <button\n                        onClick={() => {\n                            setIsSolving(!isSolving);\n                        }}\n                        disabled={!solver}\n                    >\n                        {isSolving ? \"Pause\" : \"Solve!\"}\n                    </button>\n                    <button\n                        onClick={() => {\n                            sudoku.clear();\n                            setSolver(null);\n                            setGrid(sudoku.grid);\n                        }}\n                        disabled={isSolving || !solver}\n                    >\n                        Clear\n                    </button>\n                </div>\n                <div className=\"variable-control\">\n                    <span className=\"variable-control-label\">Algorithm:</span>\n                    <div className=\"variable-control-controls\">\n                        <select\n                            value={selectedSolverName}\n                            onChange={(e) =>\n                                setSelectedSolverName(\n                                    e.target.value as SolverName\n                                )\n                            }\n                            disabled={isSolving}\n                        >\n                            {solvers.map((solverName) => (\n                                <option key={solverName} value={solverName}>\n                                    {solverName}\n                                </option>\n                            ))}\n                        </select>\n                    </div>\n                </div>\n                <div className=\"variable-control\">\n                    <span className=\"variable-control-label\">Interval:</span>\n                    <div className=\"variable-control-controls\">\n                        <button\n                            onClick={() =>\n                                setIntervalMs(Math.max(intervalMs - 50, 0))\n                            }\n                            disabled={intervalMs === 0}\n                        >\n                            -\n                        </button>\n                        <span>{intervalMs} ms</span>\n                        <button onClick={() => setIntervalMs(intervalMs + 50)}>\n                            +\n                        </button>\n                    </div>\n                </div>\n                <div className=\"variable-control\">\n                    <span className=\"variable-control-label\">Difficulty:</span>\n                    <div className=\"variable-control-controls\">\n                        <button\n                            onClick={() =>\n                                setDifficulty((difficulty - 1) as any)\n                            }\n                            disabled={difficulty === 1}\n                        >\n                            -\n                        </button>\n                        <span>{`${difficulty} (${\n                            [\"easy\", \"norm\", \"hard\"][difficulty - 1]\n                        })`}</span>\n                        <button\n                            onClick={() =>\n                                setDifficulty((difficulty + 1) as any)\n                            }\n                            disabled={difficulty === 3}\n                        >\n                            +\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./ui/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}